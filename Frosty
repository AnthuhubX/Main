
--[[
    Frosty UI Library for Roblox
    Inspired by Rayfield and Orion UI libraries
    
    Created with Replit
]]

local Frosty = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local LocalPlayer = Players.LocalPlayer

-- Theme configuration
Frosty.Theme = {
    BackgroundColor = Color3.fromRGB(20, 25, 30),
    SidebarColor = Color3.fromRGB(15, 20, 25),
    PrimaryColor = Color3.fromRGB(90, 160, 255),
    SecondaryColor = Color3.fromRGB(50, 100, 180),
    AccentColor = Color3.fromRGB(120, 190, 255),
    TextColor = Color3.fromRGB(240, 240, 240),
    Font = Enum.Font.Gotham,
    ElementBackground = Color3.fromRGB(30, 35, 40),
    ToggleOn = Color3.fromRGB(70, 180, 120),
    ToggleOff = Color3.fromRGB(100, 100, 100)
}

local function CreateTween(instance, properties, duration, easingStyle, easingDirection)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out),
        properties
    )
    return tween
end

local function RoundNumber(number, decimalPlaces)
    local multiplier = 10 ^ (decimalPlaces or 0)
    return math.floor(number * multiplier + 0.5) / multiplier
end

function Frosty:IsCoreGuiEnabled()
    return gethui or get_hidden_gui or (syn and syn.protect_gui) or (function() return CoreGui end)
end

function Frosty:GetScreenSize()
    return LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui").AbsoluteSize
end

-- Create the main GUI
function Frosty:CreateWindow(config)
    config = config or {}
    config.Name = config.Name or "Frosty UI"
    config.LoadingTitle = config.LoadingTitle or "Frosty UI Loading..."
    config.LoadingSubtitle = config.LoadingSubtitle or "by FrostyTeam"
    config.ConfigurationSaving = config.ConfigurationSaving or { Enabled = false, FolderName = nil, FileName = "FrostyConfig" }
    
    -- Create main instances
    local FrostyGUI = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local Container = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local Sidebar = Instance.new("Frame")
    local SidebarUICorner = Instance.new("UICorner")
    local TabHolder = Instance.new("ScrollingFrame")
    local TabHolderList = Instance.new("UIListLayout")
    local TabHolderPadding = Instance.new("UIPadding")
    local TitleBar = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local Close = Instance.new("ImageButton")
    local ContentContainer = Instance.new("Frame")
    
    -- Window object
    local Window = {}
    Window.Tabs = {}
    Window.TabsObjects = {}
    Window.Dropdowns = {}
    Window.Colorpickers = {}
    Window.ConfigurationFolder = config.ConfigurationSaving.FolderName or "FrostyConfiguration"
    Window.ConfigurationFile = config.ConfigurationSaving.FileName or "Config"
    
    -- Set up GUI
    FrostyGUI.Name = "FrostyGUI"
    FrostyGUI.Parent = Frosty:IsCoreGuiEnabled()
    FrostyGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    FrostyGUI.DisplayOrder = 100
    
    if syn and syn.protect_gui then
        syn.protect_gui(FrostyGUI)
    end
    
    -- Main frame setup
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = FrostyGUI
    MainFrame.BackgroundColor3 = Frosty.Theme.BackgroundColor
    MainFrame.Position = UDim2.new(0.5, -300, 0.5, -175)
    MainFrame.Size = UDim2.new(0, 600, 0, 350)
    MainFrame.ClipsDescendants = true
    
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = MainFrame
    
    -- Create shadow effect
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.Parent = MainFrame
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0, -15, 0, -15)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.ZIndex = 0
    Shadow.Image = "rbxassetid://5554236805"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(23, 23, 277, 277)
    
    -- Title bar setup
    TitleBar.Name = "TitleBar"
    TitleBar.Parent = MainFrame
    TitleBar.BackgroundColor3 = Frosty.Theme.SidebarColor
    TitleBar.BorderSizePixel = 0
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    
    Title.Name = "Title"
    Title.Parent = TitleBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.Size = UDim2.new(1, -40, 1, 0)
    Title.Font = Frosty.Theme.Font
    Title.Text = config.Name
    Title.TextColor3 = Frosty.Theme.TextColor
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    Close.Name = "Close"
    Close.Parent = TitleBar
    Close.BackgroundTransparency = 1
    Close.Position = UDim2.new(1, -25, 0.5, -8)
    Close.Size = UDim2.new(0, 16, 0, 16)
    Close.Image = "rbxassetid://6764432408"
    Close.ImageColor3 = Frosty.Theme.TextColor
    
    -- Sidebar setup
    Sidebar.Name = "Sidebar"
    Sidebar.Parent = MainFrame
    Sidebar.BackgroundColor3 = Frosty.Theme.SidebarColor
    Sidebar.Position = UDim2.new(0, 0, 0, 30)
    Sidebar.Size = UDim2.new(0, 130, 1, -30)
    
    SidebarUICorner.CornerRadius = UDim.new(0, 6)
    SidebarUICorner.Parent = Sidebar
    
    -- Fix corner overlap
    local SidebarFixer = Instance.new("Frame")
    SidebarFixer.Name = "SidebarFixer"
    SidebarFixer.Parent = Sidebar
    SidebarFixer.BackgroundColor3 = Frosty.Theme.SidebarColor
    SidebarFixer.BorderSizePixel = 0
    SidebarFixer.Position = UDim2.new(1, -6, 0, 0)
    SidebarFixer.Size = UDim2.new(0, 6, 1, 0)
    
    -- Tab holder
    TabHolder.Name = "TabHolder"
    TabHolder.Parent = Sidebar
    TabHolder.Active = true
    TabHolder.BackgroundTransparency = 1
    TabHolder.Position = UDim2.new(0, 0, 0, 10)
    TabHolder.Size = UDim2.new(1, 0, 1, -10)
    TabHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabHolder.ScrollBarThickness = 0
    
    TabHolderList.Name = "TabHolderList"
    TabHolderList.Parent = TabHolder
    TabHolderList.HorizontalAlignment = Enum.HorizontalAlignment.Center
    TabHolderList.SortOrder = Enum.SortOrder.LayoutOrder
    TabHolderList.Padding = UDim.new(0, 5)
    
    TabHolderPadding.Name = "TabHolderPadding"
    TabHolderPadding.Parent = TabHolder
    TabHolderPadding.PaddingTop = UDim.new(0, 5)
    
    -- Content container
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Parent = MainFrame
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Position = UDim2.new(0, 130, 0, 30)
    ContentContainer.Size = UDim2.new(1, -130, 1, -30)
    
    -- Make window draggable
    local dragging, dragInput, dragStart, startPos
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
    
    -- Close button functionality
    Close.MouseButton1Click:Connect(function()
        FrostyGUI:Destroy()
    end)
    
    -- Tab functionality
    function Window:CreateTab(name, icon)
        icon = icon or "rbxassetid://7733715400"  -- Default icon
        
        -- Create tab button
        local TabButton = Instance.new("TextButton")
        local TabButtonIcon = Instance.new("ImageLabel")
        local TabButtonTitle = Instance.new("TextLabel")
        
        TabButton.Name = name.."Tab"
        TabButton.Parent = TabHolder
        TabButton.BackgroundColor3 = Frosty.Theme.ElementBackground
        TabButton.Size = UDim2.new(0, 120, 0, 30)
        TabButton.AutoButtonColor = false
        TabButton.Font = Frosty.Theme.Font
        TabButton.Text = ""
        TabButton.BackgroundTransparency = 0.5
        
        local TabButtonCorner = Instance.new("UICorner")
        TabButtonCorner.CornerRadius = UDim.new(0, 4)
        TabButtonCorner.Parent = TabButton
        
        TabButtonIcon.Name = "Icon"
        TabButtonIcon.Parent = TabButton
        TabButtonIcon.BackgroundTransparency = 1
        TabButtonIcon.Position = UDim2.new(0, 5, 0, 5)
        TabButtonIcon.Size = UDim2.new(0, 20, 0, 20)
        TabButtonIcon.Image = icon
        TabButtonIcon.ImageColor3 = Frosty.Theme.TextColor
        
        TabButtonTitle.Name = "Title"
        TabButtonTitle.Parent = TabButton
        TabButtonTitle.BackgroundTransparency = 1
        TabButtonTitle.Position = UDim2.new(0, 30, 0, 0)
        TabButtonTitle.Size = UDim2.new(1, -30, 1, 0)
        TabButtonTitle.Font = Frosty.Theme.Font
        TabButtonTitle.Text = name
        TabButtonTitle.TextColor3 = Frosty.Theme.TextColor
        TabButtonTitle.TextSize = 14
        TabButtonTitle.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Create tab container
        local TabContainer = Instance.new("ScrollingFrame")
        local TabContainerList = Instance.new("UIListLayout")
        local TabContainerPadding = Instance.new("UIPadding")
        
        TabContainer.Name = name.."Container"
        TabContainer.Parent = ContentContainer
        TabContainer.Active = true
        TabContainer.BackgroundTransparency = 1
        TabContainer.Size = UDim2.new(1, 0, 1, 0)
        TabContainer.ScrollBarThickness = 4
        TabContainer.Visible = false
        TabContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
        
        TabContainerList.Name = "List"
        TabContainerList.Parent = TabContainer
        TabContainerList.HorizontalAlignment = Enum.HorizontalAlignment.Center
        TabContainerList.SortOrder = Enum.SortOrder.LayoutOrder
        TabContainerList.Padding = UDim.new(0, 10)
        
        TabContainerPadding.Name = "Padding"
        TabContainerPadding.Parent = TabContainer
        TabContainerPadding.PaddingTop = UDim.new(0, 10)
        TabContainerPadding.PaddingLeft = UDim.new(0, 10)
        TabContainerPadding.PaddingRight = UDim.new(0, 10)
        
        -- Auto-size canvas
        TabContainerList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContainer.CanvasSize = UDim2.new(0, 0, 0, TabContainerList.AbsoluteContentSize.Y + 20)
        end)
        
        -- Tab object
        local Tab = {}
        Tab.Name = name
        
        -- Tab selection
        local function selectTab()
            for _, otherTab in pairs(Window.Tabs) do
                otherTab.TabButton.BackgroundTransparency = 0.5
            end
            
            for _, container in pairs(ContentContainer:GetChildren()) do
                if container:IsA("ScrollingFrame") then
                    container.Visible = false
                end
            end
            
            TabButton.BackgroundTransparency = 0
            TabContainer.Visible = true
        end
        
        TabButton.MouseButton1Click:Connect(selectTab)
        
        -- If first tab, select it
        if #Window.Tabs == 0 then
            TabContainer.Visible = true
            TabButton.BackgroundTransparency = 0
        end
        
        -- Store tab data
        Tab.TabButton = TabButton
        Tab.Container = TabContainer
        table.insert(Window.Tabs, Tab)
        Window.TabsObjects[name] = Tab
        
        -- Element Creation Functions
        function Tab:CreateSection(title)
            local Section = {}
            
            local SectionFrame = Instance.new("Frame")
            local SectionTitle = Instance.new("TextLabel")
            local SectionContent = Instance.new("Frame")
            local SectionList = Instance.new("UIListLayout")
            
            SectionFrame.Name = title.."Section"
            SectionFrame.Parent = TabContainer
            SectionFrame.BackgroundColor3 = Frosty.Theme.ElementBackground
            SectionFrame.Size = UDim2.new(1, -20, 0, 40)
            SectionFrame.AutomaticSize = Enum.AutomaticSize.Y
            
            local SectionCorner = Instance.new("UICorner")
            SectionCorner.CornerRadius = UDim.new(0, 6)
            SectionCorner.Parent = SectionFrame
            
            SectionTitle.Name = "Title"
            SectionTitle.Parent = SectionFrame
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Position = UDim2.new(0, 10, 0, 0)
            SectionTitle.Size = UDim2.new(1, -20, 0, 30)
            SectionTitle.Font = Frosty.Theme.Font
            SectionTitle.Text = title
            SectionTitle.TextColor3 = Frosty.Theme.TextColor
            SectionTitle.TextSize = 16
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            
            SectionContent.Name = "Content"
            SectionContent.Parent = SectionFrame
            SectionContent.BackgroundTransparency = 1
            SectionContent.Position = UDim2.new(0, 0, 0, 30)
            SectionContent.Size = UDim2.new(1, 0, 0, 0)
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            
            SectionList.Name = "List"
            SectionList.Parent = SectionContent
            SectionList.HorizontalAlignment = Enum.HorizontalAlignment.Center
            SectionList.SortOrder = Enum.SortOrder.LayoutOrder
            SectionList.Padding = UDim.new(0, 8)
            
            -- Element creation functions
            function Section:CreateButton(options)
                options = options or {}
                options.Name = options.Name or "Button"
                options.Callback = options.Callback or function() end
                
                local Button = Instance.new("TextButton")
                local ButtonCorner = Instance.new("UICorner")
                
                Button.Name = options.Name.."Button"
                Button.Parent = SectionContent
                Button.BackgroundColor3 = Frosty.Theme.PrimaryColor
                Button.Size = UDim2.new(1, -20, 0, 32)
                Button.Font = Frosty.Theme.Font
                Button.Text = options.Name
                Button.TextColor3 = Frosty.Theme.TextColor
                Button.TextSize = 14
                Button.AutoButtonColor = false
                
                ButtonCorner.CornerRadius = UDim.new(0, 4)
                ButtonCorner.Parent = Button
                
                -- Button effects
                Button.MouseEnter:Connect(function()
                    local tween = CreateTween(Button, {BackgroundColor3 = Frosty.Theme.SecondaryColor}, 0.2)
                    tween:Play()
                end)
                
                Button.MouseLeave:Connect(function()
                    local tween = CreateTween(Button, {BackgroundColor3 = Frosty.Theme.PrimaryColor}, 0.2)
                    tween:Play()
                end)
                
                Button.MouseButton1Down:Connect(function()
                    local tween = CreateTween(Button, {BackgroundColor3 = Frosty.Theme.AccentColor}, 0.1)
                    tween:Play()
                end)
                
                Button.MouseButton1Up:Connect(function()
                    local tween = CreateTween(Button, {BackgroundColor3 = Frosty.Theme.SecondaryColor}, 0.1)
                    tween:Play()
                end)
                
                Button.MouseButton1Click:Connect(function()
                    options.Callback()
                end)
                
                local ButtonObj = {}
                
                function ButtonObj:UpdateText(text)
                    Button.Text = text
                end
                
                return ButtonObj
            end
            
            function Section:CreateToggle(options)
                options = options or {}
                options.Name = options.Name or "Toggle"
                options.Default = options.Default or false
                options.Callback = options.Callback or function() end
                
                local Toggle = Instance.new("Frame")
                local ToggleCorner = Instance.new("UICorner")
                local ToggleTitle = Instance.new("TextLabel")
                local ToggleButton = Instance.new("Frame")
                local ToggleButtonCorner = Instance.new("UICorner")
                local ToggleIndicator = Instance.new("Frame")
                local ToggleIndicatorCorner = Instance.new("UICorner")
                
                Toggle.Name = options.Name.."Toggle"
                Toggle.Parent = SectionContent
                Toggle.BackgroundColor3 = Frosty.Theme.ElementBackground
                Toggle.BackgroundTransparency = 0.5
                Toggle.Size = UDim2.new(1, -20, 0, 32)
                
                ToggleCorner.CornerRadius = UDim.new(0, 4)
                ToggleCorner.Parent = Toggle
                
                ToggleTitle.Name = "Title"
                ToggleTitle.Parent = Toggle
                ToggleTitle.BackgroundTransparency = 1
                ToggleTitle.Position = UDim2.new(0, 10, 0, 0)
                ToggleTitle.Size = UDim2.new(1, -60, 1, 0)
                ToggleTitle.Font = Frosty.Theme.Font
                ToggleTitle.Text = options.Name
                ToggleTitle.TextColor3 = Frosty.Theme.TextColor
                ToggleTitle.TextSize = 14
                ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleButton.Name = "Button"
                ToggleButton.Parent = Toggle
                ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                ToggleButton.Position = UDim2.new(1, -50, 0.5, -8)
                ToggleButton.Size = UDim2.new(0, 40, 0, 16)
                
                ToggleButtonCorner.CornerRadius = UDim.new(1, 0)
                ToggleButtonCorner.Parent = ToggleButton
                
                ToggleIndicator.Name = "Indicator"
                ToggleIndicator.Parent = ToggleButton
                ToggleIndicator.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                ToggleIndicator.Position = UDim2.new(0, 2, 0.5, -6)
                ToggleIndicator.Size = UDim2.new(0, 12, 0, 12)
                
                ToggleIndicatorCorner.CornerRadius = UDim.new(1, 0)
                ToggleIndicatorCorner.Parent = ToggleIndicator
                
                -- Toggle state
                local Toggled = options.Default
                
                local function updateToggle()
                    if Toggled then
                        local indicatorTween = CreateTween(ToggleIndicator, {
                            Position = UDim2.new(1, -14, 0.5, -6),
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        }, 0.2)
                        
                        local buttonTween = CreateTween(ToggleButton, {
                            BackgroundColor3 = Frosty.Theme.ToggleOn
                        }, 0.2)
                        
                        indicatorTween:Play()
                        buttonTween:Play()
                    else
                        local indicatorTween = CreateTween(ToggleIndicator, {
                            Position = UDim2.new(0, 2, 0.5, -6),
                            BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                        }, 0.2)
                        
                        local buttonTween = CreateTween(ToggleButton, {
                            BackgroundColor3 = Frosty.Theme.ToggleOff
                        }, 0.2)
                        
                        indicatorTween:Play()
                        buttonTween:Play()
                    end
                end
                
                -- Initialize toggle state
                updateToggle()
                
                -- Toggle interactivity
                local function toggleState()
                    Toggled = not Toggled
                    updateToggle()
                    options.Callback(Toggled)
                end
                
                Toggle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleState()
                    end
                end)
                
                ToggleButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggleState()
                    end
                end)
                
                local ToggleObj = {}
                
                function ToggleObj:Set(state)
                    Toggled = state
                    updateToggle()
                    options.Callback(Toggled)
                end
                
                return ToggleObj
            end
            
            function Section:CreateSlider(options)
                options = options or {}
                options.Name = options.Name or "Slider"
                options.Min = options.Min or 0
                options.Max = options.Max or 100
                options.Default = options.Default or options.Min
                options.Increment = options.Increment or 1
                options.Callback = options.Callback or function() end
                
                -- Ensure default value is within range and properly incremented
                options.Default = math.clamp(options.Default, options.Min, options.Max)
                options.Default = options.Min + (math.floor((options.Default - options.Min) / options.Increment + 0.5) * options.Increment)
                
                local Slider = Instance.new("Frame")
                local SliderCorner = Instance.new("UICorner")
                local SliderTitle = Instance.new("TextLabel")
                local SliderValue = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarCorner = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillCorner = Instance.new("UICorner")
                local SliderButton = Instance.new("TextButton")
                
                Slider.Name = options.Name.."Slider"
                Slider.Parent = SectionContent
                Slider.BackgroundColor3 = Frosty.Theme.ElementBackground
                Slider.BackgroundTransparency = 0.5
                Slider.Size = UDim2.new(1, -20, 0, 50)
                
                SliderCorner.CornerRadius = UDim.new(0, 4)
                SliderCorner.Parent = Slider
                
                SliderTitle.Name = "Title"
                SliderTitle.Parent = Slider
                SliderTitle.BackgroundTransparency = 1
                SliderTitle.Position = UDim2.new(0, 10, 0, 0)
                SliderTitle.Size = UDim2.new(1, -20, 0, 25)
                SliderTitle.Font = Frosty.Theme.Font
                SliderTitle.Text = options.Name
                SliderTitle.TextColor3 = Frosty.Theme.TextColor
                SliderTitle.TextSize = 14
                SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderValue.Name = "Value"
                SliderValue.Parent = Slider
                SliderValue.BackgroundTransparency = 1
                SliderValue.Position = UDim2.new(1, -50, 0, 0)
                SliderValue.Size = UDim2.new(0, 40, 0, 25)
                SliderValue.Font = Frosty.Theme.Font
                SliderValue.Text = tostring(options.Default)
                SliderValue.TextColor3 = Frosty.Theme.TextColor
                SliderValue.TextSize = 14
                
                SliderBar.Name = "Bar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                SliderBar.Position = UDim2.new(0, 10, 0, 30)
                SliderBar.Size = UDim2.new(1, -20, 0, 10)
                
                SliderBarCorner.CornerRadius = UDim.new(1, 0)
                SliderBarCorner.Parent = SliderBar
                
                SliderFill.Name = "Fill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = Frosty.Theme.PrimaryColor
                SliderFill.Size = UDim2.new(0, 0, 1, 0)
                
                SliderFillCorner.CornerRadius = UDim.new(1, 0)
                SliderFillCorner.Parent = SliderFill
                
                SliderButton.Name = "Button"
                SliderButton.Parent = Slider
                SliderButton.BackgroundTransparency = 1
                SliderButton.Position = UDim2.new(0, 10, 0, 30)
                SliderButton.Size = UDim2.new(1, -20, 0, 10)
                SliderButton.Text = ""
                
                -- Slider functionality
                local value = options.Default
                local dragging = false
                
                local function updateSlider(input)
                    local barPosition = SliderBar.AbsolutePosition
                    local barSize = SliderBar.AbsoluteSize
                    
                    local relativeX = math.clamp(input.Position.X - barPosition.X, 0, barSize.X)
                    local percent = relativeX / barSize.X
                    
                    local rawValue = options.Min + (options.Max - options.Min) * percent
                    local roundedValue = options.Min + (math.floor((rawValue - options.Min) / options.Increment + 0.5) * options.Increment)
                    value = math.clamp(roundedValue, options.Min, options.Max)
                    
                    -- Update visual elements
                    local fillPercent = (value - options.Min) / (options.Max - options.Min)
                    SliderFill.Size = UDim2.new(fillPercent, 0, 1, 0)
                    SliderValue.Text = tostring(RoundNumber(value, 2))
                    
                    options.Callback(value)
                end
                
                local function setSliderValue(newValue)
                    value = math.clamp(newValue, options.Min, options.Max)
                    local fillPercent = (value - options.Min) / (options.Max - options.Min)
                    SliderFill.Size = UDim2.new(fillPercent, 0, 1, 0)
                    SliderValue.Text = tostring(RoundNumber(value, 2))
                    options.Callback(value)
                end
                
                -- Initialize slider
                setSliderValue(options.Default)
                
                -- Event handling
                SliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        updateSlider(input)
                    end
                end)
                
                SliderButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(input)
                    end
                end)
                
                local SliderObj = {}
                
                function SliderObj:Set(newValue)
                    setSliderValue(newValue)
                end
                
                function SliderObj:GetValue()
                    return value
                end
                
                return SliderObj
            end
            
            function Section:CreateDropdown(options)
                options = options or {}
                options.Name = options.Name or "Dropdown"
                options.Options = options.Options or {}
                options.Default = options.Default or nil
                options.Callback = options.Callback or function() end
                
                local Dropdown = Instance.new("Frame")
                local DropdownCorner = Instance.new("UICorner")
                local DropdownTitle = Instance.new("TextLabel")
                local DropdownButton = Instance.new("TextButton")
                local DropdownIcon = Instance.new("ImageLabel")
                local DropdownMenu = Instance.new("Frame")
                local DropdownMenuCorner = Instance.new("UICorner")
                local DropdownMenuList = Instance.new("ScrollingFrame")
                local DropdownMenuListLayout = Instance.new("UIListLayout")
                
                Dropdown.Name = options.Name.."Dropdown"
                Dropdown.Parent = SectionContent
                Dropdown.BackgroundColor3 = Frosty.Theme.ElementBackground
                Dropdown.BackgroundTransparency = 0.5
                Dropdown.Size = UDim2.new(1, -20, 0, 32)
                Dropdown.ClipsDescendants = true
                
                DropdownCorner.CornerRadius = UDim.new(0, 4)
                DropdownCorner.Parent = Dropdown
                
                DropdownTitle.Name = "Title"
                DropdownTitle.Parent = Dropdown
                DropdownTitle.BackgroundTransparency = 1
                DropdownTitle.Position = UDim2.new(0, 10, 0, 0)
                DropdownTitle.Size = UDim2.new(1, -50, 0, 32)
                DropdownTitle.Font = Frosty.Theme.Font
                DropdownTitle.Text = options.Name
                DropdownTitle.TextColor3 = Frosty.Theme.TextColor
                DropdownTitle.TextSize = 14
                DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownButton.Name = "Button"
                DropdownButton.Parent = Dropdown
                DropdownButton.BackgroundTransparency = 1
                DropdownButton.Size = UDim2.new(1, 0, 0, 32)
                DropdownButton.Text = ""
                
                DropdownIcon.Name = "Icon"
                DropdownIcon.Parent = Dropdown
                DropdownIcon.BackgroundTransparency = 1
                DropdownIcon.Position = UDim2.new(1, -25, 0, 8)
                DropdownIcon.Size = UDim2.new(0, 16, 0, 16)
                DropdownIcon.Image = "rbxassetid://6031091004"
                DropdownIcon.ImageColor3 = Frosty.Theme.TextColor
                
                DropdownMenu.Name = "Menu"
                DropdownMenu.Parent = Dropdown
                DropdownMenu.BackgroundColor3 = Frosty.Theme.ElementBackground
                DropdownMenu.BackgroundTransparency = 0.2
                DropdownMenu.Position = UDim2.new(0, 0, 0, 32)
                DropdownMenu.Size = UDim2.new(1, 0, 0, 0)
                DropdownMenu.Visible = false
                
                DropdownMenuCorner.CornerRadius = UDim.new(0, 4)
                DropdownMenuCorner.Parent = DropdownMenu
                
                DropdownMenuList.Name = "List"
                DropdownMenuList.Parent = DropdownMenu
                DropdownMenuList.Active = true
                DropdownMenuList.BackgroundTransparency = 1
                DropdownMenuList.Size = UDim2.new(1, 0, 1, 0)
                DropdownMenuList.CanvasSize = UDim2.new(0, 0, 0, 0)
                DropdownMenuList.ScrollBarThickness = 3
                
                DropdownMenuListLayout.Name = "Layout"
                DropdownMenuListLayout.Parent = DropdownMenuList
                DropdownMenuListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
                DropdownMenuListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownMenuListLayout.Padding = UDim.new(0, 2)
                
                -- Dropdown state
                local open = false
                local selectedOption = options.Default
                
                -- Update dropdown display
                local function updateDropdown()
                    local menuHeight = 0
                    
                    if open then
                        menuHeight = math.min(100, #options.Options * 25)
                        DropdownMenu.Visible = true
                    else
                        menuHeight = 0
                        DropdownMenu.Visible = false
                    end
                    
                    local iconRotation = open and 180 or 0
                    local iconTween = CreateTween(DropdownIcon, {Rotation = iconRotation}, 0.2)
                    
                    iconTween:Play()
                    
                    if open then
                        Dropdown.Size = UDim2.new(1, -20, 0, 32 + menuHeight)
                        DropdownMenu.Size = UDim2.new(1, 0, 0, menuHeight)
                    else
                        local sizeTween = CreateTween(Dropdown, {Size = UDim2.new(1, -20, 0, 32)}, 0.2)
                        local menuSizeTween = CreateTween(DropdownMenu, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        
                        sizeTween:Play()
                        menuSizeTween:Play()
                    end
                end
                
                -- Create option items
                local function createOptions()
                    -- Clear existing options
                    for _, child in pairs(DropdownMenuList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    -- Create new options
                    for _, optionText in pairs(options.Options) do
                        local OptionButton = Instance.new("TextButton")
                        local OptionButtonCorner = Instance.new("UICorner")
                        
                        OptionButton.Name = "Option"
                        OptionButton.Parent = DropdownMenuList
                        OptionButton.BackgroundColor3 = Frosty.Theme.ElementBackground
                        OptionButton.BackgroundTransparency = 0.8
                        OptionButton.Size = UDim2.new(1, -10, 0, 25)
                        OptionButton.Font = Frosty.Theme.Font
                        OptionButton.Text = optionText
                        OptionButton.TextColor3 = Frosty.Theme.TextColor
                        OptionButton.TextSize = 14
                        
                        -- Highlight selected option
                        if selectedOption == optionText then
                            OptionButton.BackgroundColor3 = Frosty.Theme.PrimaryColor
                            OptionButton.BackgroundTransparency = 0.5
                        end
                        
                        OptionButtonCorner.CornerRadius = UDim.new(0, 4)
                        OptionButtonCorner.Parent = OptionButton
                        
                        -- Option selection
                        OptionButton.MouseButton1Click:Connect(function()
                            selectedOption = optionText
                            DropdownTitle.Text = options.Name .. ": " .. selectedOption
                            open = false
                            updateDropdown()
                            options.Callback(selectedOption)
                        end)
                        
                        -- Hover effects
                        OptionButton.MouseEnter:Connect(function()
                            if selectedOption ~= optionText then
                                local tween = CreateTween(OptionButton, {BackgroundTransparency = 0.6}, 0.2)
                                tween:Play()
                            end
                        end)
                        
                        OptionButton.MouseLeave:Connect(function()
                            if selectedOption ~= optionText then
                                local tween = CreateTween(OptionButton, {BackgroundTransparency = 0.8}, 0.2)
                                tween:Play()
                            end
                        end)
                    end
                    
                    -- Update canvas size
                    DropdownMenuList.CanvasSize = UDim2.new(0, 0, 0, DropdownMenuListLayout.AbsoluteContentSize.Y)
                end
                
                -- Initialize dropdown
                createOptions()
                
                if selectedOption then
                    DropdownTitle.Text = options.Name .. ": " .. selectedOption
                end
                
                -- Dropdown toggle
                DropdownButton.MouseButton1Click:Connect(function()
                    open = not open
                    updateDropdown()
                end)
                
                -- Dropdown object
                local DropdownObj = {}
                
                function DropdownObj:Refresh(newOptions, newDefault)
                    options.Options = newOptions or options.Options
                    selectedOption = newDefault or selectedOption
                    createOptions()
                    
                    if selectedOption then
                        DropdownTitle.Text = options.Name .. ": " .. selectedOption
                    else
                        DropdownTitle.Text = options.Name
                    end
                end
                
                function DropdownObj:Set(option)
                    if table.find(options.Options, option) then
                        selectedOption = option
                        DropdownTitle.Text = options.Name .. ": " .. selectedOption
                        options.Callback(selectedOption)
                    end
                end
                
                return DropdownObj
            end
            
            function Section:CreateColorPicker(options)
                options = options or {}
                options.Name = options.Name or "Color Picker"
                options.Default = options.Default or Color3.fromRGB(255, 255, 255)
                options.Callback = options.Callback or function() end
                
                local ColorPicker = Instance.new("Frame")
                local ColorPickerCorner = Instance.new("UICorner")
                local ColorPickerTitle = Instance.new("TextLabel")
                local ColorDisplay = Instance.new("Frame")
                local ColorDisplayCorner = Instance.new("UICorner")
                local ColorPickerButton = Instance.new("TextButton")
                local ColorPickerMenu = Instance.new("Frame")
                local ColorPickerMenuCorner = Instance.new("UICorner")
                local HueSaturationPicker = Instance.new("ImageLabel")
                local HueSaturationPickerCorner = Instance.new("UICorner")
                local HueSaturationSelector = Instance.new("Frame")
                local HueSaturationSelectorCorner = Instance.new("UICorner")
                local BrightnessPicker = Instance.new("Frame")
                local BrightnessPickerCorner = Instance.new("UICorner")
                local BrightnessPickerGradient = Instance.new("UIGradient")
                local BrightnessSelector = Instance.new("Frame")
                local BrightnessSelectorCorner = Instance.new("UICorner")
                local RgbDisplay = Instance.new("TextLabel")
                local HexDisplay = Instance.new("TextLabel")
                
                ColorPicker.Name = options.Name.."ColorPicker"
                ColorPicker.Parent = SectionContent
                ColorPicker.BackgroundColor3 = Frosty.Theme.ElementBackground
                ColorPicker.BackgroundTransparency = 0.5
                ColorPicker.Size = UDim2.new(1, -20, 0, 32)
                ColorPicker.ClipsDescendants = true
                
                ColorPickerCorner.CornerRadius = UDim.new(0, 4)
                ColorPickerCorner.Parent = ColorPicker
                
                ColorPickerTitle.Name = "Title"
                ColorPickerTitle.Parent = ColorPicker
                ColorPickerTitle.BackgroundTransparency = 1
                ColorPickerTitle.Position = UDim2.new(0, 10, 0, 0)
                ColorPickerTitle.Size = UDim2.new(1, -60, 0, 32)
                ColorPickerTitle.Font = Frosty.Theme.Font
                ColorPickerTitle.Text = options.Name
                ColorPickerTitle.TextColor3 = Frosty.Theme.TextColor
                ColorPickerTitle.TextSize = 14
                ColorPickerTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                ColorDisplay.Name = "Display"
                ColorDisplay.Parent = ColorPicker
                ColorDisplay.BackgroundColor3 = options.Default
                ColorDisplay.Position = UDim2.new(1, -40, 0.5, -10)
                ColorDisplay.Size = UDim2.new(0, 30, 0, 20)
                
                ColorDisplayCorner.CornerRadius = UDim.new(0, 4)
                ColorDisplayCorner.Parent = ColorDisplay
                
                ColorPickerButton.Name = "Button"
                ColorPickerButton.Parent = ColorPicker
                ColorPickerButton.BackgroundTransparency = 1
                ColorPickerButton.Size = UDim2.new(1, 0, 0, 32)
                ColorPickerButton.Text = ""
                
                ColorPickerMenu.Name = "Menu"
                ColorPickerMenu.Parent = ColorPicker
                ColorPickerMenu.BackgroundColor3 = Frosty.Theme.ElementBackground
                ColorPickerMenu.BackgroundTransparency = 0.2
                ColorPickerMenu.Position = UDim2.new(0, 0, 0, 32)
                ColorPickerMenu.Size = UDim2.new(1, 0, 0, 0)
                ColorPickerMenu.Visible = false
                
                ColorPickerMenuCorner.CornerRadius = UDim.new(0, 4)
                ColorPickerMenuCorner.Parent = ColorPickerMenu
                
                HueSaturationPicker.Name = "HueSaturationPicker"
                HueSaturationPicker.Parent = ColorPickerMenu
                HueSaturationPicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                HueSaturationPicker.Position = UDim2.new(0, 10, 0, 10)
                HueSaturationPicker.Size = UDim2.new(1, -20, 0, 150)
                HueSaturationPicker.Image = "rbxassetid://4155801252"
                
                HueSaturationPickerCorner.CornerRadius = UDim.new(0, 4)
                HueSaturationPickerCorner.Parent = HueSaturationPicker
                
                HueSaturationSelector.Name = "Selector"
                HueSaturationSelector.Parent = HueSaturationPicker
                HueSaturationSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                HueSaturationSelector.Size = UDim2.new(0, 10, 0, 10)
                HueSaturationSelector.AnchorPoint = Vector2.new(0.5, 0.5)
                
                HueSaturationSelectorCorner.CornerRadius = UDim.new(1, 0)
                HueSaturationSelectorCorner.Parent = HueSaturationSelector
                
                BrightnessPicker.Name = "BrightnessPicker"
                BrightnessPicker.Parent = ColorPickerMenu
                BrightnessPicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                BrightnessPicker.Position = UDim2.new(0, 10, 0, 170)
                BrightnessPicker.Size = UDim2.new(1, -20, 0, 20)
                
                BrightnessPickerCorner.CornerRadius = UDim.new(0, 4)
                BrightnessPickerCorner.Parent = BrightnessPicker
                
                BrightnessPickerGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                })
                BrightnessPickerGradient.Parent = BrightnessPicker
                
                BrightnessSelector.Name = "Selector"
                BrightnessSelector.Parent = BrightnessPicker
                BrightnessSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                BrightnessSelector.Position = UDim2.new(1, 0, 0, 0)
                BrightnessSelector.Size = UDim2.new(0, 4, 1, 0)
                
                BrightnessSelectorCorner.CornerRadius = UDim.new(0, 2)
                BrightnessSelectorCorner.Parent = BrightnessSelector
                
                RgbDisplay.Name = "RgbDisplay"
                RgbDisplay.Parent = ColorPickerMenu
                RgbDisplay.BackgroundTransparency = 1
                RgbDisplay.Position = UDim2.new(0, 10, 0, 200)
                RgbDisplay.Size = UDim2.new(0.5, -15, 0, 20)
                RgbDisplay.Font = Frosty.Theme.Font
                RgbDisplay.Text = "RGB: 255, 255, 255"
                RgbDisplay.TextColor3 = Frosty.Theme.TextColor
                RgbDisplay.TextSize = 14
                
                HexDisplay.Name = "HexDisplay"
                HexDisplay.Parent = ColorPickerMenu
                HexDisplay.BackgroundTransparency = 1
                HexDisplay.Position = UDim2.new(0.5, 5, 0, 200)
                HexDisplay.Size = UDim2.new(0.5, -15, 0, 20)
                HexDisplay.Font = Frosty.Theme.Font
                HexDisplay.Text = "Hex: #FFFFFF"
                HexDisplay.TextColor3 = Frosty.Theme.TextColor
                HexDisplay.TextSize = 14
                
                -- Color picker state
                local open = false
                local color = options.Default
                local hue, saturation, brightness = 0, 0, 1
                
                -- Convert RGB to HSV
                local function rgbToHsv(rgb)
                    local r, g, b = rgb.R, rgb.G, rgb.B
                    local max, min = math.max(r, g, b), math.min(r, g, b)
                    local h, s, v
                    
                    v = max
                    local delta = max - min
                    
                    if max ~= 0 then
                        s = delta / max
                    else
                        s = 0
                        h = 0
                        return h, s, v
                    end
                    
                    if r == max then
                        h = (g - b) / delta
                    elseif g == max then
                        h = 2 + (b - r) / delta
                    else
                        h = 4 + (r - g) / delta
                    end
                    
                    h = h * 60
                    if h < 0 then h = h + 360 end
                    
                    return h / 360, s, v
                end
                
                -- Convert HSV to RGB
                local function hsvToRgb(h, s, v)
                    local r, g, b
                    
                    if s == 0 then
                        r, g, b = v, v, v
                    else
                        local i = math.floor(h * 6)
                        local f = h * 6 - i
                        local p = v * (1 - s)
                        local q = v * (1 - s * f)
                        local t = v * (1 - s * (1 - f))
                        
                        i = i % 6
                        
                        if i == 0 then r, g, b = v, t, p
                        elseif i == 1 then r, g, b = q, v, p
                        elseif i == 2 then r, g, b = p, v, t
                        elseif i == 3 then r, g, b = p, q, v
                        elseif i == 4 then r, g, b = t, p, v
                        elseif i == 5 then r, g, b = v, p, q
                        end
                    end
                    
                    return Color3.new(r, g, b)
                end
                
                -- RGB to Hex
                local function rgbToHex(rgb)
                    local r = math.floor(rgb.R * 255)
                    local g = math.floor(rgb.G * 255)
                    local b = math.floor(rgb.B * 255)
                    return string.format("#%02X%02X%02X", r, g, b)
                end
                
                -- Update color picker display
                local function updateColorPicker()
                    local menuHeight = 0
                    
                    if open then
                        menuHeight = 230
                        ColorPickerMenu.Visible = true
                    else
                        menuHeight = 0
                        ColorPickerMenu.Visible = false
                    end
                    
                    if open then
                        ColorPicker.Size = UDim2.new(1, -20, 0, 32 + menuHeight)
                        ColorPickerMenu.Size = UDim2.new(1, 0, 0, menuHeight)
                    else
                        local sizeTween = CreateTween(ColorPicker, {Size = UDim2.new(1, -20, 0, 32)}, 0.2)
                        local menuSizeTween = CreateTween(ColorPickerMenu, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        
                        sizeTween:Play()
                        menuSizeTween:Play()
                    end
                    
                    -- Update the color display
                    ColorDisplay.BackgroundColor3 = color
                    RgbDisplay.Text = string.format("RGB: %d, %d, %d", 
                        math.floor(color.R * 255 + 0.5), 
                        math.floor(color.G * 255 + 0.5), 
                        math.floor(color.B * 255 + 0.5))
                    HexDisplay.Text = "Hex: " .. rgbToHex(color)
                    
                    -- Position the hue/saturation selector
                    HueSaturationSelector.Position = UDim2.new(saturation, 0, 1 - hue, 0)
                    
                    -- Position the brightness selector
                    BrightnessSelector.Position = UDim2.new(brightness, 0, 0, 0)
                    
                    -- Update the brightness gradient
                    BrightnessPickerGradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                        ColorSequenceKeypoint.new(1, hsvToRgb(hue, saturation, 1))
                    })
                end
                
                -- Initialize color picker
                hue, saturation, brightness = rgbToHsv(color)
                updateColorPicker()
                
                -- Color picker toggle
                ColorPickerButton.MouseButton1Click:Connect(function()
                    open = not open
                    updateColorPicker()
                end)
                
                -- Hue/Saturation picker
                local hueSaturationDragging = false
                
                HueSaturationPicker.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        hueSaturationDragging = true
                        
                        local relativeX = math.clamp((input.Position.X - HueSaturationPicker.AbsolutePosition.X) / HueSaturationPicker.AbsoluteSize.X, 0, 1)
                        local relativeY = math.clamp((input.Position.Y - HueSaturationPicker.AbsolutePosition.Y) / HueSaturationPicker.AbsoluteSize.Y, 0, 1)
                        
                        hue = 1 - relativeY
                        saturation = relativeX
                        
                        color = hsvToRgb(hue, saturation, brightness)
                        updateColorPicker()
                        options.Callback(color)
                    end
                end)
                
                HueSaturationPicker.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        hueSaturationDragging = false
                    end
                end)
                
                -- Brightness picker
                local brightnessDragging = false
                
                BrightnessPicker.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        brightnessDragging = true
                        
                        local relativeX = math.clamp((input.Position.X - BrightnessPicker.AbsolutePosition.X) / BrightnessPicker.AbsoluteSize.X, 0, 1)
                        
                        brightness = relativeX
                        
                        color = hsvToRgb(hue, saturation, brightness)
                        updateColorPicker()
                        options.Callback(color)
                    end
                end)
                
                BrightnessPicker.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        brightnessDragging = false
                    end
                end)
                
                -- Handle mouse movement for dragging
                UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        if hueSaturationDragging then
                            local relativeX = math.clamp((input.Position.X - HueSaturationPicker.AbsolutePosition.X) / HueSaturationPicker.AbsoluteSize.X, 0, 1)
                            local relativeY = math.clamp((input.Position.Y - HueSaturationPicker.AbsolutePosition.Y) / HueSaturationPicker.AbsoluteSize.Y, 0, 1)
                            
                            hue = 1 - relativeY
                            saturation = relativeX
                            
                            color = hsvToRgb(hue, saturation, brightness)
                            updateColorPicker()
                            options.Callback(color)
                        elseif brightnessDragging then
                            local relativeX = math.clamp((input.Position.X - BrightnessPicker.AbsolutePosition.X) / BrightnessPicker.AbsoluteSize.X, 0, 1)
                            
                            brightness = relativeX
                            
                            color = hsvToRgb(hue, saturation, brightness)
                            updateColorPicker()
                            options.Callback(color)
                        end
                    end
                end)
                
                -- Color picker object
                local ColorPickerObj = {}
                
                function ColorPickerObj:Set(newColor)
                    color = newColor
                    hue, saturation, brightness = rgbToHsv(color)
                    updateColorPicker()
                    options.Callback(color)
                end
                
                return ColorPickerObj
            end
            
            function Section:CreateTextbox(options)
                options = options or {}
                options.Name = options.Name or "Textbox"
                options.Default = options.Default or ""
                options.PlaceholderText = options.PlaceholderText or "Enter text..."
                options.ClearOnFocus = (options.ClearOnFocus == nil) and true or options.ClearOnFocus
                options.Callback = options.Callback or function() end
                
                local Textbox = Instance.new("Frame")
                local TextboxCorner = Instance.new("UICorner")
                local TextboxTitle = Instance.new("TextLabel")
                local TextboxInput = Instance.new("TextBox")
                local TextboxInputCorner = Instance.new("UICorner")
                
                Textbox.Name = options.Name.."Textbox"
                Textbox.Parent = SectionContent
                Textbox.BackgroundColor3 = Frosty.Theme.ElementBackground
                Textbox.BackgroundTransparency = 0.5
                Textbox.Size = UDim2.new(1, -20, 0, 32)
                
                TextboxCorner.CornerRadius = UDim.new(0, 4)
                TextboxCorner.Parent = Textbox
                
                TextboxTitle.Name = "Title"
                TextboxTitle.Parent = Textbox
                TextboxTitle.BackgroundTransparency = 1
                TextboxTitle.Position = UDim2.new(0, 10, 0, 0)
                TextboxTitle.Size = UDim2.new(0.5, -20, 1, 0)
                TextboxTitle.Font = Frosty.Theme.Font
                TextboxTitle.Text = options.Name
                TextboxTitle.TextColor3 = Frosty.Theme.TextColor
                TextboxTitle.TextSize = 14
                TextboxTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                TextboxInput.Name = "Input"
                TextboxInput.Parent = Textbox
                TextboxInput.BackgroundColor3 = Frosty.Theme.ElementBackground
                TextboxInput.Position = UDim2.new(0.5, 0, 0.5, -12)
                TextboxInput.Size = UDim2.new(0.5, -10, 0, 24)
                TextboxInput.Font = Frosty.Theme.Font
                TextboxInput.Text = options.Default
                TextboxInput.TextColor3 = Frosty.Theme.TextColor
                TextboxInput.TextSize = 14
                TextboxInput.PlaceholderText = options.PlaceholderText
                TextboxInput.ClearTextOnFocus = options.ClearOnFocus
                
                TextboxInputCorner.CornerRadius = UDim.new(0, 4)
                TextboxInputCorner.Parent = TextboxInput
                
                -- Textbox functionality
                TextboxInput.FocusLost:Connect(function(enterPressed)
                    if enterPressed then
                        options.Callback(TextboxInput.Text)
                    end
                end)
                
                -- Textbox object
                local TextboxObj = {}
                
                function TextboxObj:Set(text)
                    TextboxInput.Text = text
                    options.Callback(text)
                end
                
                function TextboxObj:GetText()
                    return TextboxInput.Text
                end
                
                return TextboxObj
            end
            
            function Section:CreateLabel(options)
                options = options or {}
                options.Text = options.Text or "Label"
                options.Alignment = options.Alignment or Enum.TextXAlignment.Center
                
                local Label = Instance.new("TextLabel")
                local LabelCorner = Instance.new("UICorner")
                
                Label.Name = "Label"
                Label.Parent = SectionContent
                Label.BackgroundColor3 = Frosty.Theme.ElementBackground
                Label.BackgroundTransparency = 0.7
                Label.Size = UDim2.new(1, -20, 0, 32)
                Label.Font = Frosty.Theme.Font
                Label.Text = options.Text
                Label.TextColor3 = Frosty.Theme.TextColor
                Label.TextSize = 14
                Label.TextXAlignment = options.Alignment
                
                LabelCorner.CornerRadius = UDim.new(0, 4)
                LabelCorner.Parent = Label
                
                -- Label object
                local LabelObj = {}
                
                function LabelObj:Set(text)
                    Label.Text = text
                end
                
                return LabelObj
            end
            
            return Section
        end
        
        return Tab
    end
    
    -- Initialize loading screen
    if config.LoadingTitle and config.LoadingSubtitle then
        local LoadingFrame = Instance.new("Frame")
        local LoadingFrameCorner = Instance.new("UICorner")
        local LoadingTitle = Instance.new("TextLabel")
        local LoadingSubtitle = Instance.new("TextLabel")
        local LoadingBar = Instance.new("Frame")
        local LoadingBarCorner = Instance.new("UICorner")
        local LoadingBarFill = Instance.new("Frame")
        local LoadingBarFillCorner = Instance.new("UICorner")
        
        LoadingFrame.Name = "LoadingFrame"
        LoadingFrame.Parent = FrostyGUI
        LoadingFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        LoadingFrame.BackgroundColor3 = Frosty.Theme.BackgroundColor
        LoadingFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        LoadingFrame.Size = UDim2.new(0, 300, 0, 120)
        
        LoadingFrameCorner.CornerRadius = UDim.new(0, 6)
        LoadingFrameCorner.Parent = LoadingFrame
        
        LoadingTitle.Name = "Title"
        LoadingTitle.Parent = LoadingFrame
        LoadingTitle.BackgroundTransparency = 1
        LoadingTitle.Position = UDim2.new(0, 0, 0, 10)
        LoadingTitle.Size = UDim2.new(1, 0, 0, 30)
        LoadingTitle.Font = Frosty.Theme.Font
        LoadingTitle.Text = config.LoadingTitle
        LoadingTitle.TextColor3 = Frosty.Theme.TextColor
        LoadingTitle.TextSize = 20
        
        LoadingSubtitle.Name = "Subtitle"
        LoadingSubtitle.Parent = LoadingFrame
        LoadingSubtitle.BackgroundTransparency = 1
        LoadingSubtitle.Position = UDim2.new(0, 0, 0, 40)
        LoadingSubtitle.Size = UDim2.new(1, 0, 0, 20)
        LoadingSubtitle.Font = Frosty.Theme.Font
        LoadingSubtitle.Text = config.LoadingSubtitle
        LoadingSubtitle.TextColor3 = Frosty.Theme.TextColor
        LoadingSubtitle.TextSize = 16
        
        LoadingBar.Name = "Bar"
        LoadingBar.Parent = LoadingFrame
        LoadingBar.BackgroundColor3 = Frosty.Theme.ElementBackground
        LoadingBar.Position = UDim2.new(0.1, 0, 0, 80)
        LoadingBar.Size = UDim2.new(0.8, 0, 0, 10)
        
        LoadingBarCorner.CornerRadius = UDim.new(1, 0)
        LoadingBarCorner.Parent = LoadingBar
        
        LoadingBarFill.Name = "Fill"
        LoadingBarFill.Parent = LoadingBar
        LoadingBarFill.BackgroundColor3 = Frosty.Theme.PrimaryColor
        LoadingBarFill.Size = UDim2.new(0, 0, 1, 0)
        
        LoadingBarFillCorner.CornerRadius = UDim.new(1, 0)
        LoadingBarFillCorner.Parent = LoadingBarFill
        
        -- Loading animation
        local startTime = tick()
        
        local loadingConnection
        loadingConnection = RunService.RenderStepped:Connect(function()
            local elapsed = tick() - startTime
            local progress = math.clamp(elapsed / 1, 0, 1)
            
            LoadingBarFill.Size = UDim2.new(progress, 0, 1, 0)
            
            if progress >= 1 then
                loadingConnection:Disconnect()
                LoadingFrame:Destroy()
                MainFrame.Visible = true
            end
        end)
        
        MainFrame.Visible = false
    else
        MainFrame.Visible = true
    end
    
    return Window
end

-- Developer Notes API
function Frosty:Notes(title, content)
    local NotesUI = Instance.new("ScreenGui")
    local NotesFrame = Instance.new("Frame")
    local NotesCorner = Instance.new("UICorner")
    local NotesTitle = Instance.new("TextLabel")
    local NotesClose = Instance.new("TextButton")
    local NotesContent = Instance.new("TextLabel")
    local NotesScrolling = Instance.new("ScrollingFrame")
    
    NotesUI.Name = "FrostyNotes"
    NotesUI.Parent = Frosty:IsCoreGuiEnabled()
    NotesUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    NotesUI.DisplayOrder = 101
    
    NotesFrame.Name = "NotesFrame"
    NotesFrame.Parent = NotesUI
    NotesFrame.BackgroundColor3 = Frosty.Theme.BackgroundColor
    NotesFrame.Position = UDim2.new(0.5, -150, 0.5, -125)
    NotesFrame.Size = UDim2.new(0, 300, 0, 250)
    
    NotesCorner.CornerRadius = UDim.new(0, 6)
    NotesCorner.Parent = NotesFrame
    
    NotesTitle.Name = "Title"
    NotesTitle.Parent = NotesFrame
    NotesTitle.BackgroundTransparency = 1
    NotesTitle.Position = UDim2.new(0, 10, 0, 0)
    NotesTitle.Size = UDim2.new(1, -50, 0, 30)
    NotesTitle.Font = Frosty.Theme.Font
    NotesTitle.Text = title or "Developer Notes"
    NotesTitle.TextColor3 = Frosty.Theme.TextColor
    NotesTitle.TextSize = 16
    NotesTitle.TextXAlignment = Enum.TextXAlignment.Left
    
    NotesClose.Name = "Close"
    NotesClose.Parent = NotesFrame
    NotesClose.BackgroundTransparency = 1
    NotesClose.Position = UDim2.new(1, -30, 0, 0)
    NotesClose.Size = UDim2.new(0, 30, 0, 30)
    NotesClose.Font = Frosty.Theme.Font
    NotesClose.Text = "X"
    NotesClose.TextColor3 = Frosty.Theme.TextColor
    NotesClose.TextSize = 16
    
    NotesScrolling.Name = "NotesScrolling"
    NotesScrolling.Parent = NotesFrame
    NotesScrolling.BackgroundTransparency = 1
    NotesScrolling.Position = UDim2.new(0, 10, 0, 30)
    NotesScrolling.Size = UDim2.new(1, -20, 1, -40)
    NotesScrolling.CanvasSize = UDim2.new(0, 0, 0, 0)
    NotesScrolling.ScrollBarThickness = 4
    
    NotesContent.Name = "Content"
    NotesContent.Parent = NotesScrolling
    NotesContent.BackgroundTransparency = 1
    NotesContent.Size = UDim2.new(1, -4, 1, 0)
    NotesContent.Font = Frosty.Theme.Font
    NotesContent.Text = content or ""
    NotesContent.TextColor3 = Frosty.Theme.TextColor
    NotesContent.TextSize = 14
    NotesContent.TextWrapped = true
    NotesContent.TextXAlignment = Enum.TextXAlignment.Left
    NotesContent.TextYAlignment = Enum.TextYAlignment.Top
    NotesContent.AutomaticSize = Enum.AutomaticSize.Y
    
    -- Auto-size scrolling frame
    NotesContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
        NotesScrolling.CanvasSize = UDim2.new(0, 0, 0, NotesContent.AbsoluteSize.Y + 10)
    end)
    
    -- Make notes draggable
    local dragging, dragInput, dragStart, startPos
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        NotesFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    NotesTitle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = NotesFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    NotesTitle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
    
    -- Close button
    NotesClose.MouseButton1Click:Connect(function()
        NotesUI:Destroy()
    end)
    
    return NotesUI
end

-- Notification API
function Frosty:Notify(title, content, duration)
    duration = duration or 3
    
    local NotificationUI = Instance.new("ScreenGui")
    local NotificationFrame = Instance.new("Frame")
    local NotificationCorner = Instance.new("UICorner")
    local NotificationTitle = Instance.new("TextLabel")
    local NotificationContent = Instance.new("TextLabel")
    local NotificationBar = Instance.new("Frame")
    local NotificationBarCorner = Instance.new("UICorner")
    
    NotificationUI.Name = "FrostyNotification"
    NotificationUI.Parent = Frosty:IsCoreGuiEnabled()
    NotificationUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    NotificationUI.DisplayOrder = 102
    
    NotificationFrame.Name = "NotificationFrame"
    NotificationFrame.Parent = NotificationUI
    NotificationFrame.BackgroundColor3 = Frosty.Theme.BackgroundColor
    NotificationFrame.Position = UDim2.new(1, 20, 1, -20)
    NotificationFrame.AnchorPoint = Vector2.new(1, 1)
    NotificationFrame.Size = UDim2.new(0, 250, 0, 100)
    
    NotificationCorner.CornerRadius = UDim.new(0, 6)
    NotificationCorner.Parent = NotificationFrame
    
    NotificationTitle.Name = "Title"
    NotificationTitle.Parent = NotificationFrame
    NotificationTitle.BackgroundTransparency = 1
    NotificationTitle.Position = UDim2.new(0, 10, 0, 0)
    NotificationTitle.Size = UDim2.new(1, -20, 0, 30)
    NotificationTitle.Font = Frosty.Theme.Font
    NotificationTitle.Text = title or "Notification"
    NotificationTitle.TextColor3 = Frosty.Theme.TextColor
    NotificationTitle.TextSize = 16
    NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left
    
    NotificationContent.Name = "Content"
    NotificationContent.Parent = NotificationFrame
    NotificationContent.BackgroundTransparency = 1
    NotificationContent.Position = UDim2.new(0, 10, 0, 30)
    NotificationContent.Size = UDim2.new(1, -20, 1, -40)
    NotificationContent.Font = Frosty.Theme.Font
    NotificationContent.Text = content or ""
    NotificationContent.TextColor3 = Frosty.Theme.TextColor
    NotificationContent.TextSize = 14
    NotificationContent.TextWrapped = true
    NotificationContent.TextXAlignment = Enum.TextXAlignment.Left
    NotificationContent.TextYAlignment = Enum.TextYAlignment.Top
    
    NotificationBar.Name = "Bar"
    NotificationBar.Parent = NotificationFrame
    NotificationBar.BackgroundColor3 = Frosty.Theme.PrimaryColor
    NotificationBar.Position = UDim2.new(0, 0, 1, -2)
    NotificationBar.Size = UDim2.new(1, 0, 0, 2)
    
    NotificationBarCorner.CornerRadius = UDim.new(1, 0)
    NotificationBarCorner.Parent = NotificationBar
    
    -- Animation
    NotificationFrame:TweenPosition(UDim2.new(1, -20, 1, -20), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.5, true)
    
    -- Timeout bar
    local barTween = TweenService:Create(
        NotificationBar,
        TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.In),
        {Size = UDim2.new(0, 0, 0, 2)}
    )
    barTween:Play()
    
    -- Cleanup
    task.delay(duration, function()
        NotificationFrame:TweenPosition(UDim2.new(1, 20, 1, -20), Enum.EasingDirection.In, Enum.EasingStyle.Quart, 0.5, true, function()
            NotificationUI:Destroy()
        end)
    end)
    
    return NotificationUI
end

-- Return the library
return Frosty
