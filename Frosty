--[[
    Frosty UI Library
    A sleek, modern UI library for Roblox inspired by Rayfield and Orion
    
    Author: Replit Assistant
]]

local Frosty = {}
Frosty.__index = Frosty

-- Services
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")

-- Constants
local TWEEN_INFO = TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
local LOCAL_PLAYER = Players.LocalPlayer
local MOUSE = LOCAL_PLAYER:GetMouse()

-- Variables
local Windows = {}
local Dragging = false
local DragInput
local DragStart
local StartPos

-- Utility Functions
local function Create(instanceType)
    return function(properties)
        local instance = Instance.new(instanceType)
        for k, v in pairs(properties or {}) do
            if k ~= "Parent" then
                instance[k] = v
            end
        end
        if properties.Parent then
            instance.Parent = properties.Parent
        end
        return instance
    end
end

local function Tween(instance, properties)
    local tween = TweenService:Create(instance, TWEEN_INFO, properties)
    tween:Play()
    return tween
end

local function Ripple(button)
    local ripple = Create("Frame")({
        Name = "Ripple",
        Parent = button,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.8,
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.fromScale(0, 0),
        ZIndex = button.ZIndex + 1,
    })
    
    Create("UICorner")({
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local targetSize = UDim2.fromScale(1.5, 1.5)
    local tween = Tween(ripple, {Size = targetSize, BackgroundTransparency = 1})
    tween.Completed:Connect(function()
        ripple:Destroy()
    end)
    
    return ripple
end

-- Core UI Functions
local function MakeDraggable(frame)
    local dragToggle
    local dragInput
    local dragStart
    local startPos
    
    local function UpdateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            UpdateInput(input)
        end
    end)
end

-- Frosty Main Methods
function Frosty.new(title)
    local self = setmetatable({}, Frosty)
    
    -- Create UI container
    self.Container = Create("ScreenGui")({
        Name = "FrostyUI",
        Parent = if RunService:IsStudio() then LOCAL_PLAYER:WaitForChild("PlayerGui") else CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
    })
    
    -- Create main window
    self.Window = Create("Frame")({
        Name = "Window",
        Parent = self.Container,
        BackgroundColor3 = Color3.fromRGB(25, 25, 30),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.new(0, 500, 0, 350),
    })
    
    -- Make window rounded
    Create("UICorner")({
        CornerRadius = UDim.new(0, 6),
        Parent = self.Window
    })
    
    -- Add a subtle shadow
    Create("DropShadow")({
        Name = "Shadow",
        Parent = self.Window,
        BackgroundTransparency = 1,
        Size = UDim2.fromScale(1, 1),
        ZIndex = 0,
    })
    
    -- Create title bar
    self.TitleBar = Create("Frame")({
        Name = "TitleBar",
        Parent = self.Window,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
    })
    
    -- Round the top corners of the title bar
    Create("UICorner")({
        CornerRadius = UDim.new(0, 6),
        Parent = self.TitleBar
    })
    
    -- Create title
    self.Title = Create("TextLabel")({
        Name = "Title",
        Parent = self.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -20, 1, 0),
        Font = Enum.Font.GothamSemibold,
        Text = title or "Frosty UI",
        TextColor3 = Color3.fromRGB(240, 240, 240),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
    })
    
    -- Create close button
    self.CloseButton = Create("TextButton")({
        Name = "CloseButton",
        Parent = self.TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0, 5),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = "Ã—",
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 20,
    })
    
    -- Add hover effect to close button
    self.CloseButton.MouseEnter:Connect(function()
        Tween(self.CloseButton, {TextColor3 = Color3.fromRGB(255, 100, 100)})
    end)
    
    self.CloseButton.MouseLeave:Connect(function()
        Tween(self.CloseButton, {TextColor3 = Color3.fromRGB(200, 200, 200)})
    end)
    
    -- Add click event to close button
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    -- Create content container
    self.ContentContainer = Create("Frame")({
        Name = "ContentContainer",
        Parent = self.Window,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 1, -30),
        ClipsDescendants = true,
    })
    
    -- Create tabs container
    self.TabContainer = Create("Frame")({
        Name = "TabContainer",
        Parent = self.ContentContainer,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        BorderSizePixel = 0,
        Size = UDim2.new(0, 120, 1, 0),
    })
    
    -- Create a list layout for tabs
    Create("UIListLayout")({
        Parent = self.TabContainer,
        Padding = UDim.new(0, 5),
        SortOrder = Enum.SortOrder.LayoutOrder,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
    })
    
    -- Add padding to tab container
    Create("UIPadding")({
        Parent = self.TabContainer,
        PaddingTop = UDim.new(0, 10),
    })
    
    -- Create tab content container
    self.TabContentContainer = Create("Frame")({
        Name = "TabContentContainer",
        Parent = self.ContentContainer,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 120, 0, 0),
        Size = UDim2.new(1, -120, 1, 0),
        ClipsDescendants = true,
    })
    
    -- Make window draggable
    MakeDraggable(self.Window)
    
    -- Initialize tabs table
    self.Tabs = {}
    self.SelectedTab = nil
    
    table.insert(Windows, self)
    return self
end

function Frosty:CreateTab(title, icon)
    local tab = {}
    
    -- Create tab button
    tab.Button = Create("TextButton")({
        Name = title.."Tab",
        Parent = self.TabContainer,
        BackgroundColor3 = Color3.fromRGB(35, 35, 40),
        BorderSizePixel = 0,
        Size = UDim2.new(0.9, 0, 0, 30),
        Font = Enum.Font.Gotham,
        Text = title,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        AutoButtonColor = false,
    })
    
    -- Round tab button corners
    Create("UICorner")({
        CornerRadius = UDim.new(0, 4),
        Parent = tab.Button
    })
    
    -- Add icon if provided
    if icon then
        local iconImage = Create("ImageLabel")({
            Name = "Icon",
            Parent = tab.Button,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 5, 0.5, 0),
            Size = UDim2.new(0, 16, 0, 16),
            AnchorPoint = Vector2.new(0, 0.5),
            Image = icon,
        })
        
        -- Adjust text position
        tab.Button.TextXAlignment = Enum.TextXAlignment.Right
        tab.Button.UIPadding = Create("UIPadding")({
            Parent = tab.Button,
            PaddingRight = UDim.new(0, 10),
        })
    end
    
    -- Create tab content frame
    tab.Content = Create("ScrollingFrame")({
        Name = title.."Content",
        Parent = self.TabContentContainer,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.fromScale(1, 1),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100),
        Visible = false,
    })
    
    -- Add padding to content
    Create("UIPadding")({
        Parent = tab.Content,
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10),
    })
    
    -- Create layout for items
    tab.Layout = Create("UIListLayout")({
        Parent = tab.Content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8),
    })
    
    -- Handle content auto-sizing
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Content.CanvasSize = UDim2.new(0, 0, 0, tab.Layout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Tab selection logic
    tab.Button.MouseButton1Click:Connect(function()
        self:SelectTab(title)
        Ripple(tab.Button)
    end)
    
    -- Add hover effect
    tab.Button.MouseEnter:Connect(function()
        if self.SelectedTab ~= title then
            Tween(tab.Button, {BackgroundColor3 = Color3.fromRGB(45, 45, 50)})
        end
    end)
    
    tab.Button.MouseLeave:Connect(function()
        if self.SelectedTab ~= title then
            Tween(tab.Button, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)})
        end
    end)
    
    -- Add tab to tabs table
    self.Tabs[title] = tab
    
    -- Select this tab if it's the first one
    if not self.SelectedTab then
        self:SelectTab(title)
    end
    
    -- Item creation methods
    function tab:AddLabel(text)
        local label = Create("TextLabel")({
            Name = "Label",
            Parent = self.Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 30),
            Font = Enum.Font.Gotham,
            Text = text,
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        return label
    end
    
    function tab:AddButton(options)
        options = options or {}
        local title = options.Title or "Button"
        local callback = options.Callback or function() end
        
        local buttonContainer = Create("Frame")({
            Name = "ButtonContainer",
            Parent = self.Content,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            Size = UDim2.new(1, 0, 0, 35),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = buttonContainer
        })
        
        local button = Create("TextButton")({
            Name = "Button",
            Parent = buttonContainer,
            BackgroundTransparency = 1,
            Size = UDim2.fromScale(1, 1),
            Font = Enum.Font.Gotham,
            Text = title,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextSize = 14,
        })
        
        button.MouseButton1Click:Connect(function()
            Ripple(button)
            callback()
        end)
        
        button.MouseEnter:Connect(function()
            Tween(buttonContainer, {BackgroundColor3 = Color3.fromRGB(45, 45, 50)})
        end)
        
        button.MouseLeave:Connect(function()
            Tween(buttonContainer, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)})
        end)
        
        return buttonContainer
    end
    
    function tab:AddToggle(options)
        options = options or {}
        local title = options.Title or "Toggle"
        local default = options.Default or false
        local callback = options.Callback or function() end
        
        local toggleContainer = Create("Frame")({
            Name = "ToggleContainer",
            Parent = self.Content,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            Size = UDim2.new(1, 0, 0, 35),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = toggleContainer
        })
        
        local title = Create("TextLabel")({
            Name = "Title",
            Parent = toggleContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(1, -50, 1, 0),
            Font = Enum.Font.Gotham,
            Text = title,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        local toggleBackground = Create("Frame")({
            Name = "ToggleBackground",
            Parent = toggleContainer,
            BackgroundColor3 = Color3.fromRGB(50, 50, 55),
            Position = UDim2.new(1, -40, 0.5, 0),
            Size = UDim2.new(0, 30, 0, 16),
            AnchorPoint = Vector2.new(0, 0.5),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(1, 0),
            Parent = toggleBackground
        })
        
        local toggleButton = Create("Frame")({
            Name = "ToggleButton",
            Parent = toggleBackground,
            BackgroundColor3 = Color3.fromRGB(200, 200, 200),
            Position = UDim2.new(0, 2, 0.5, 0),
            Size = UDim2.new(0, 12, 0, 12),
            AnchorPoint = Vector2.new(0, 0.5),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(1, 0),
            Parent = toggleButton
        })
        
        local toggle = {
            Value = default,
            Container = toggleContainer,
            Update = function(self, value)
                self.Value = value
                if value then
                    Tween(toggleBackground, {BackgroundColor3 = Color3.fromRGB(66, 134, 245)})
                    Tween(toggleButton, {Position = UDim2.new(1, -14, 0.5, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255)})
                else
                    Tween(toggleBackground, {BackgroundColor3 = Color3.fromRGB(50, 50, 55)})
                    Tween(toggleButton, {Position = UDim2.new(0, 2, 0.5, 0), BackgroundColor3 = Color3.fromRGB(200, 200, 200)})
                end
                callback(self.Value)
            end
        }
        
        toggleContainer.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                toggle:Update(not toggle.Value)
            end
        end)
        
        toggle:Update(default)
        return toggle
    end
    
    function tab:AddSlider(options)
        options = options or {}
        local title = options.Title or "Slider"
        local min = options.Min or 0
        local max = options.Max or 100
        local default = math.clamp(options.Default or min, min, max)
        local callback = options.Callback or function() end
        local precise = options.Precise or false
        
        local sliderContainer = Create("Frame")({
            Name = "SliderContainer",
            Parent = self.Content,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            Size = UDim2.new(1, 0, 0, 50),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = sliderContainer
        })
        
        local title = Create("TextLabel")({
            Name = "Title",
            Parent = sliderContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 5),
            Size = UDim2.new(1, -20, 0, 20),
            Font = Enum.Font.Gotham,
            Text = title,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        local valueDisplay = Create("TextLabel")({
            Name = "Value",
            Parent = sliderContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -50, 0, 5),
            Size = UDim2.new(0, 40, 0, 20),
            Font = Enum.Font.Gotham,
            Text = tostring(default),
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Right,
        })
        
        local sliderBackground = Create("Frame")({
            Name = "SliderBackground",
            Parent = sliderContainer,
            BackgroundColor3 = Color3.fromRGB(50, 50, 55),
            Position = UDim2.new(0, 10, 0, 30),
            Size = UDim2.new(1, -20, 0, 5),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(1, 0),
            Parent = sliderBackground
        })
        
        local sliderFill = Create("Frame")({
            Name = "SliderFill",
            Parent = sliderBackground,
            BackgroundColor3 = Color3.fromRGB(66, 134, 245),
            Size = UDim2.new(0, 0, 1, 0),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(1, 0),
            Parent = sliderFill
        })
        
        local sliderButton = Create("Frame")({
            Name = "SliderButton",
            Parent = sliderBackground,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Position = UDim2.new(0, 0, 0.5, 0),
            Size = UDim2.new(0, 12, 0, 12),
            AnchorPoint = Vector2.new(0.5, 0.5),
            ZIndex = 2,
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(1, 0),
            Parent = sliderButton
        })
        
        local slider = {
            Value = default,
            Min = min,
            Max = max,
            Update = function(self, value)
                value = math.clamp(value, self.Min, self.Max)
                self.Value = value
                
                local percent = (value - self.Min) / (self.Max - self.Min)
                
                Tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)})
                Tween(sliderButton, {Position = UDim2.new(percent, 0, 0.5, 0)})
                
                if precise then
                    valueDisplay.Text = string.format("%.2f", value)
                else
                    valueDisplay.Text = string.format("%d", math.floor(value))
                end
                
                callback(value)
            end
        }
        
        -- Update slider on drag
        local dragging = false
        
        sliderBackground.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                local percent = math.clamp((input.Position.X - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1)
                local value = slider.Min + ((slider.Max - slider.Min) * percent)
                slider:Update(value)
            end
        end)
        
        sliderBackground.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local percent = math.clamp((input.Position.X - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1)
                local value = slider.Min + ((slider.Max - slider.Min) * percent)
                slider:Update(value)
            end
        end)
        
        slider:Update(default)
        return slider
    end
    
    function tab:AddDropdown(options)
        options = options or {}
        local title = options.Title or "Dropdown"
        local items = options.Items or {}
        local default = options.Default or (items[1] or "")
        local callback = options.Callback or function() end
        
        local dropdownContainer = Create("Frame")({
            Name = "DropdownContainer",
            Parent = self.Content,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            Size = UDim2.new(1, 0, 0, 35),
            ClipsDescendants = true,
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = dropdownContainer
        })
        
        local title = Create("TextLabel")({
            Name = "Title",
            Parent = dropdownContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(0, 100, 0, 35),
            Font = Enum.Font.Gotham,
            Text = title,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        local selected = Create("TextLabel")({
            Name = "Selected",
            Parent = dropdownContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 120, 0, 0),
            Size = UDim2.new(1, -150, 0, 35),
            Font = Enum.Font.Gotham,
            Text = default,
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        local toggleArrow = Create("TextLabel")({
            Name = "ToggleArrow",
            Parent = dropdownContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -30, 0, 0),
            Size = UDim2.new(0, 20, 0, 35),
            Font = Enum.Font.Gotham,
            Text = "â–¼",
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 14,
        })
        
        local itemList = Create("Frame")({
            Name = "ItemList",
            Parent = dropdownContainer,
            BackgroundColor3 = Color3.fromRGB(40, 40, 45),
            Position = UDim2.new(0, 0, 0, 35),
            Size = UDim2.new(1, 0, 0, #items * 25),
            Visible = false,
        })
        
        local layoutList = Create("UIListLayout")({
            Parent = itemList,
            SortOrder = Enum.SortOrder.LayoutOrder,
        })
        
        local dropdown = {
            Value = default,
            Open = false,
            Items = items,
            Container = dropdownContainer,
            Update = function(self, value)
                self.Value = value
                selected.Text = value
                callback(value)
            end,
            Toggle = function(self)
                self.Open = not self.Open
                if self.Open then
                    dropdownContainer.Size = UDim2.new(1, 0, 0, 35 + (#self.Items * 25))
                    itemList.Visible = true
                    Tween(toggleArrow, {Rotation = 180})
                else
                    dropdownContainer.Size = UDim2.new(1, 0, 0, 35)
                    itemList.Visible = false
                    Tween(toggleArrow, {Rotation = 0})
                end
            end,
            Refresh = function(self, newItems)
                self.Items = newItems
                
                -- Clear existing items
                for _, child in pairs(itemList:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                
                -- Add new items
                for i, item in ipairs(newItems) do
                    local itemButton = Create("TextButton")({
                        Name = item,
                        Parent = itemList,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 0, 25),
                        Font = Enum.Font.Gotham,
                        Text = item,
                        TextColor3 = Color3.fromRGB(200, 200, 200),
                        TextSize = 14,
                    })
                    
                    itemButton.MouseEnter:Connect(function()
                        Tween(itemButton, {BackgroundTransparency = 0.9, BackgroundColor3 = Color3.fromRGB(66, 134, 245)})
                    end)
                    
                    itemButton.MouseLeave:Connect(function()
                        Tween(itemButton, {BackgroundTransparency = 1})
                    end)
                    
                    itemButton.MouseButton1Click:Connect(function()
                        self:Update(item)
                        self:Toggle()
                    end)
                end
                
                -- Update container size if open
                if self.Open then
                    dropdownContainer.Size = UDim2.new(1, 0, 0, 35 + (#newItems * 25))
                    itemList.Size = UDim2.new(1, 0, 0, #newItems * 25)
                end
            end
        }
        
        -- Add click events
        dropdownContainer.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Position.Y - dropdownContainer.AbsolutePosition.Y < 35 then
                dropdown:Toggle()
            end
        end)
        
        -- Create initial items
        dropdown:Refresh(items)
        
        return dropdown
    end
    
    function tab:AddColorPicker(options)
        options = options or {}
        local title = options.Title or "Color Picker"
        local default = options.Default or Color3.fromRGB(255, 255, 255)
        local callback = options.Callback or function() end
        
        local colorContainer = Create("Frame")({
            Name = "ColorContainer",
            Parent = self.Content,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            Size = UDim2.new(1, 0, 0, 35),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = colorContainer
        })
        
        local title = Create("TextLabel")({
            Name = "Title",
            Parent = colorContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(1, -60, 1, 0),
            Font = Enum.Font.Gotham,
            Text = title,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        local colorDisplay = Create("Frame")({
            Name = "ColorDisplay",
            Parent = colorContainer,
            BackgroundColor3 = default,
            Position = UDim2.new(1, -40, 0.5, 0),
            Size = UDim2.new(0, 25, 0, 25),
            AnchorPoint = Vector2.new(0, 0.5),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = colorDisplay
        })
        
        local colorPicker = {
            Value = default,
            Container = colorContainer,
            Update = function(self, color)
                self.Value = color
                Tween(colorDisplay, {BackgroundColor3 = color})
                callback(color)
            end
        }
        
        colorDisplay.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                -- In a real implementation, this would open a color picker UI
                -- For this example, we'll just cycle through some colors
                local colors = {
                    Color3.fromRGB(255, 0, 0),   -- Red
                    Color3.fromRGB(0, 255, 0),   -- Green
                    Color3.fromRGB(0, 0, 255),   -- Blue
                    Color3.fromRGB(255, 255, 0), -- Yellow
                    Color3.fromRGB(0, 255, 255), -- Cyan
                    Color3.fromRGB(255, 0, 255), -- Magenta
                    Color3.fromRGB(255, 255, 255) -- White
                }
                
                -- Find current color in the list, or use the first one
                local currentIndex = 1
                for i, color in ipairs(colors) do
                    if color == colorPicker.Value then
                        currentIndex = i
                        break
                    end
                end
                
                -- Move to next color
                currentIndex = (currentIndex % #colors) + 1
                colorPicker:Update(colors[currentIndex])
            end
        end)
        
        colorPicker:Update(default)
        return colorPicker
    end
    
    function tab:AddTextbox(options)
        options = options or {}
        local title = options.Title or "Textbox"
        local default = options.Default or ""
        local placeholder = options.Placeholder or "Enter text..."
        local callback = options.Callback or function() end
        
        local textboxContainer = Create("Frame")({
            Name = "TextboxContainer",
            Parent = self.Content,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            Size = UDim2.new(1, 0, 0, 35),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = textboxContainer
        })
        
        local title = Create("TextLabel")({
            Name = "Title",
            Parent = textboxContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(0, 100, 1, 0),
            Font = Enum.Font.Gotham,
            Text = title,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        local textboxBackground = Create("Frame")({
            Name = "TextboxBackground",
            Parent = textboxContainer,
            BackgroundColor3 = Color3.fromRGB(45, 45, 50),
            Position = UDim2.new(0, 120, 0.5, 0),
            Size = UDim2.new(1, -130, 0, 25),
            AnchorPoint = Vector2.new(0, 0.5),
        })
        
        Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = textboxBackground
        })
        
        local textbox = Create("TextBox")({
            Name = "Textbox",
            Parent = textboxBackground,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 5, 0, 0),
            Size = UDim2.new(1, -10, 1, 0),
            Font = Enum.Font.Gotham,
            Text = default,
            PlaceholderText = placeholder,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            PlaceholderColor3 = Color3.fromRGB(130, 130, 130),
            TextSize = 14,
            ClearTextOnFocus = false,
        })
        
        local textboxObj = {
            Value = default,
            Container = textboxContainer,
            Update = function(self, value)
                self.Value = value
                textbox.Text = value
                callback(value)
            end
        }
        
        textbox.FocusLost:Connect(function(enterPressed)
            textboxObj:Update(textbox.Text)
        end)
        
        return textboxObj
    end
    
    function tab:AddSection(title)
        local sectionContainer = Create("Frame")({
            Name = "SectionContainer",
            Parent = self.Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 30),
        })
        
        local sectionTitle = Create("TextLabel")({
            Name = "SectionTitle",
            Parent = sectionContainer,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Font = Enum.Font.GothamBold,
            Text = title,
            TextColor3 = Color3.fromRGB(130, 130, 230),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        
        local line = Create("Frame")({
            Name = "Line",
            Parent = sectionContainer,
            BackgroundColor3 = Color3.fromRGB(65, 65, 70),
            Position = UDim2.new(0, 0, 1, -1),
            Size = UDim2.new(1, 0, 0, 1),
        })
        
        return sectionContainer
    end
    
    return tab
end

-- Select a tab
function Frosty:SelectTab(tabName)
    if not self.Tabs[tabName] then return end
    
    -- Deselect current tab
    if self.SelectedTab then
        local currentTab = self.Tabs[self.SelectedTab]
        Tween(currentTab.Button, {BackgroundColor3 = Color3.fromRGB(35, 35, 40)})
        currentTab.Content.Visible = false
    end
    
    -- Select new tab
    local newTab = self.Tabs[tabName]
    Tween(newTab.Button, {BackgroundColor3 = Color3.fromRGB(66, 134, 245)})
    newTab.Content.Visible = true
    
    self.SelectedTab = tabName
end

function Frosty:Notify(options)
    options = options or {}
    local title = options.Title or "Notification"
    local description = options.Description or ""
    local duration = options.Duration or 3
    
    -- Create notification container if it doesn't exist
    if not self.NotificationContainer then
        self.NotificationContainer = Create("Frame")({
            Name = "NotificationContainer",
            Parent = self.Container,
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -20, 0, 20),
            Size = UDim2.new(0, 250, 1, -40),
            AnchorPoint = Vector2.new(1, 0),
        })
        
        local notificationLayout = Create("UIListLayout")({
            Parent = self.NotificationContainer,
            Padding = UDim.new(0, 10),
            SortOrder = Enum.SortOrder.LayoutOrder,
            VerticalAlignment = Enum.VerticalAlignment.Top,
        })
    end
    
    -- Create notification
    local notification = Create("Frame")({
        Name = "Notification",
        Parent = self.NotificationContainer,
        BackgroundColor3 = Color3.fromRGB(35, 35, 40),
        Size = UDim2.new(1, 0, 0, 0), -- Start with no height
        BackgroundTransparency = 1,
        ClipsDescendants = true,
    })
    
    Create("UICorner")({
        CornerRadius = UDim.new(0, 4),
        Parent = notification
    })
    
    local notificationTitle = Create("TextLabel")({
        Name = "Title",
        Parent = notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 5),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = title,
        TextColor3 = Color3.fromRGB(240, 240, 240),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    })
    
    local notificationDesc = Create("TextLabel")({
        Name = "Description",
        Parent = notification,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 25),
        Size = UDim2.new(1, -20, 0, 0), -- Will be resized based on text
        Font = Enum.Font.Gotham,
        Text = description,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        TextYAlignment = Enum.TextYAlignment.Top,
    })
    
    -- Calculate the height based on text size
    local textSize = TextService:GetTextSize(description, 13, Enum.Font.Gotham, Vector2.new(notification.AbsoluteSize.X - 20, math.huge))
    notificationDesc.Size = UDim2.new(1, -20, 0, math.max(textSize.Y, 20))
    
    local height = 35 + notificationDesc.Size.Y.Offset
    
    -- Add progress bar
    local progressBar = Create("Frame")({
        Name = "ProgressBar",
        Parent = notification,
        BackgroundColor3 = Color3.fromRGB(66, 134, 245),
        Position = UDim2.new(0, 0, 1, -2),
        Size = UDim2.new(1, 0, 0, 2),
    })
    
    -- Animation
    notification.Size = UDim2.new(1, 0, 0, height)
    
    -- Animate in
    Tween(notification, {BackgroundTransparency = 0})
    
    -- Animate out after duration
    local connection
    connection = RunService.Heartbeat:Connect(function()
        duration = duration - RunService.Heartbeat:Wait()
        progressBar.Size = UDim2.new(duration / options.Duration, 0, 0, 2)
        
        if duration <= 0 then
            connection:Disconnect()
            
            -- Animate out
            Tween(notification, {BackgroundTransparency = 1}).Completed:Connect(function()
                Tween(notification, {Size = UDim2.new(1, 0, 0, 0)}).Completed:Connect(function()
                    notification:Destroy()
                end)
            end)
        end
    end)
    
    return notification
end

function Frosty:Destroy()
    -- Animate out
    Tween(self.Window, {Position = UDim2.new(0.5, 0, 1.5, 0), Transparency = 1}).Completed:Connect(function()
        self.Container:Destroy()
    end)
    
    -- Remove from Windows table
    for i, window in ipairs(Windows) do
        if window == self then
            table.remove(Windows, i)
            break
        end
    end
end

-- Return Frosty UI Library
return Frosty
