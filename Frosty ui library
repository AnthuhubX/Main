-- FrostyUI Library

local FrostyUI = {}

-- Button Component
local Button = {}
Button.__index = Button

function Button.new(text, size, position)
    local self = setmetatable({}, Button)

    -- Create the button
    self.button = Instance.new("TextButton")
    self.button.Size = size or UDim2.new(0, 100, 0, 50)
    self.button.Position = position or UDim2.new(0, 0, 0, 0)
    self.button.Text = text or "Button"
    self.button.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
    self.button.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.button.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Adjust for mobile
    self.button.TouchTap:Connect(function()
        print("Button tapped")
    end)

    return self
end

function Button:SetText(newText)
    self.button.Text = newText
end

function Button:SetPosition(newPosition)
    self.button.Position = newPosition
end

FrostyUI.Button = Button

-- Label Component
local Label = {}
Label.__index = Label

function Label.new(text, size, position)
    local self = setmetatable({}, Label)

    -- Create the label
    self.label = Instance.new("TextLabel")
    self.label.Size = size or UDim2.new(0, 100, 0, 50)
    self.label.Position = position or UDim2.new(0, 0, 0, 0)
    self.label.Text = text or "Label"
    self.label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.label.TextColor3 = Color3.fromRGB(0, 0, 0)
    self.label.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    return self
end

function Label:SetText(newText)
    self.label.Text = newText
end

function Label:SetPosition(newPosition)
    self.label.Position = newPosition
end

FrostyUI.Label = Label

-- Window Component
local Window = {}
Window.__index = Window

function Window.new(title, size, position)
    local self = setmetatable({}, Window)

    -- Create the window frame
    self.window = Instance.new("Frame")
    self.window.Size = size or UDim2.new(0, 300, 0, 200)
    self.window.Position = position or UDim2.new(0, 0, 0, 0)
    self.window.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    self.window.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Create the title label
    self.titleLabel = Instance.new("TextLabel")
    self.titleLabel.Size = UDim2.new(1, 0, 0, 30)
    self.titleLabel.Position = UDim2.new(0, 0, 0, 0)
    self.titleLabel.Text = title or "Window"
    self.titleLabel.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    self.titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.titleLabel.Parent = self.window

    return self
end

function Window:AddChild(child)
    child.Parent = self.window
end

function Window:SetTitle(newTitle)
    self.titleLabel.Text = newTitle
end

function Window:SetPosition(newPosition)
    self.window.Position = newPosition
end

FrostyUI.Window = Window

-- Toggle Component
local Toggle = {}
Toggle.__index = Toggle

function Toggle.new(text, default, callback)
    local self = setmetatable({}, Toggle)

    -- Create the toggle
    self.toggle = Instance.new("TextButton")
    self.toggle.Size = UDim2.new(0, 100, 0, 50)
    self.toggle.Position = UDim2.new(0, 0, 0, 0)
    self.toggle.Text = text or "Toggle"
    self.toggle.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
    self.toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.toggle.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    
    self.state = default or false
    self.callback = callback or function() end

    self.toggle.MouseButton1Click:Connect(function()
        self.state = not self.state
        self:Update()
        self.callback(self.state)
    end)

    self:Update()
    
    return self
end

function Toggle:Update()
    if self.state then
        self.toggle.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    else
        self.toggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    end
end

FrostyUI.Toggle = Toggle

-- Slider Component
local Slider = {}
Slider.__index = Slider

function Slider.new(text, min, max, default, callback)
    local self = setmetatable({}, Slider)

    -- Create the slider
    self.slider = Instance.new("Frame")
    self.slider.Size = UDim2.new(0, 200, 0, 50)
    self.slider.Position = UDim2.new(0, 0, 0, 0)
    self.slider.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
    self.slider.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    self.min = min or 0
    self.max = max or 100
    self.value = default or min
    self.callback = callback or function() end

    self.label = Instance.new("TextLabel")
    self.label.Size = UDim2.new(1, 0, 0, 20)
    self.label.Position = UDim2.new(0, 0, 0, 0)
    self.label.Text = text or "Slider"
    self.label.Parent = self.slider

    self.knob = Instance.new("Frame")
    self.knob.Size = UDim2.new(0, 10, 0, 30)
    self.knob.Position = UDim2.new((self.value - self.min) / (self.max - self.min), 0, 0.5, -15)
    self.knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    self.knob.Parent = self.slider

    self.knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self.dragging = true
        end
    end)

    self.knob.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self.dragging = false
        end
    end)

    self.slider.InputChanged:Connect(function(input)
        if self.dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local relativePos = (input.Position.X - self.slider.AbsolutePosition.X) / self.slider.AbsoluteSize.X
            self.value = math.clamp(relativePos * (self.max - self.min) + self.min, self.min, self.max)
            self.knob.Position = UDim2.new((self.value - self.min) / (self.max - self.min), 0, 0.5, -15)
            self.callback(self.value)
        end
    end)

    return self
end

FrostyUI.Slider = Slider

-- Dropdown Component
local Dropdown = {}
Dropdown.__index = Dropdown

function Dropdown.new(text, options, callback)
    local self = setmetatable({}, Dropdown)

    -- Create the dropdown
    self.dropdown = Instance.new("Frame")
    self.dropdown.Size = UDim2.new(0, 200, 0, 50)
    self.dropdown.Position = UDim2.new(0, 0, 0, 0)
    self.dropdown.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
    self.dropdown.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    self.label = Instance.new("TextLabel")
    self.label.Size = UDim2.new(1, 0, 0, 20)
    self.label.Position = UDim2.new(0, 0, 0, 0)
    self.label.Text = text or "Dropdown"
    self.label.Parent = self.dropdown

    self.options = options or {}
    self.callback = callback or function() end

    self.selection = Instance.new("TextButton")
    self.selection.Size = UDim2.new(1, 0, 0, 30)
    self.selection.Position = UDim2.new(0, 0, 0, 20)
    self.selection.Text = options[1] or "Select"
    self.selection.Parent = self.dropdown

    self.menu = Instance.new("Frame")
    self.menu.Size = UDim2.new(1, 0, 0, #options * 30)
    self.menu.Position = UDim2.new(0, 0, 0, 50)
    self.menu.Visible = false
    self.menu.Parent = self.dropdown

    for i, option in ipairs(options) do
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 0, 30)
        button.Position = UDim2.new(0, 0, 0, (i - 1) * 30)
        button.Text = option
        button.Parent = self.menu

        button.MouseButton1Click:Connect(function()
            self.selection.Text = option
            self.menu.Visible = false
            self.callback(option)
        end)
    end

    self.selection.MouseButton1Click:Connect(function()
        self.menu.Visible = not self.menu.Visible
    end)

    return self
end

function Dropdown:AddOption(option)
    table.insert(self.options, option)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 30)
    button.Position = UDim2.new(0, 0, 0, (#self.options - 1) * 30)
    button.Text = option
    button.Parent = self.menu

    button.MouseButton1Click:Connect(function()
        self.selection.Text = option
        self.menu.Visible = false
        self.callback(option)
    end)
end

function Dropdown:RemoveOption(option)
    for i, opt in ipairs(self.options) do
        if opt == option then
            table.remove(self.options, i)
            self.menu:ClearAllChildren()
            for j, newOpt in ipairs(self.options) do
                local button = Instance.new("TextButton")
                button.Size = UDim2.new(1, 0, 0, 30)
                button.Position = UDim2.new(0, 0, 0, (j - 1) * 30)
                button.Text = newOpt
                button.Parent = self.menu

                button.MouseButton1Click:Connect(function()
                    self.selection.Text = newOpt
                    self.menu.Visible = false
                    self.callback(newOpt)
                end)
            end
            break
        end
    end
end

FrostyUI.Dropdown = Dropdown

-- Return the library
return FrostyUI
