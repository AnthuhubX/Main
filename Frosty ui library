-- SoulUI Library
local SoulUI = {}

-- Function to create a ScreenGui
function SoulUI:createScreenGui(name)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = name or "SoulUI"
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    return screenGui
end

-- Function to create a Frame
function SoulUI:createFrame(parent, name, position, size, bgColor)
    local frame = Instance.new("Frame")
    frame.Name = name or "Frame"
    frame.Position = position or UDim2.new(0.5, 0, 0.5, 0)
    frame.Size = size or UDim2.new(0.3, 0, 0.3, 0)
    frame.BackgroundColor3 = bgColor or Color3.fromRGB(255, 255, 255)
    frame.Parent = parent
    return frame
end

-- Function to create a TextLabel
function SoulUI:createTextLabel(parent, name, text, position, size, textColor)
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = name or "TextLabel"
    textLabel.Text = text or "Default Text"
    textLabel.Position = position or UDim2.new(0.5, 0, 0.5, 0)
    textLabel.Size = size or UDim2.new(0.2, 0, 0.1, 0)
    textLabel.TextColor3 = textColor or Color3.fromRGB(0, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Parent = parent
    return textLabel
end

-- Function to create a Button
function SoulUI:createButton(parent, name, text, position, size, bgColor, textColor)
    local button = Instance.new("TextButton")
    button.Name = name or "Button"
    button.Text = text or "Click Me"
    button.Position = position or UDim2.new(0.5, 0, 0.5, 0)
    button.Size = size or UDim2.new(0.2, 0, 0.1, 0)
    button.BackgroundColor3 = bgColor or Color3.fromRGB(0, 0, 255)
    button.TextColor3 = textColor or Color3.fromRGB(255, 255, 255)
    button.Parent = parent
    return button
end

-- Function to create a Toggle
function SoulUI:createToggle(parent, name, text, position, size, bgColor, textColor, callback)
    local toggle = Instance.new("TextButton")
    toggle.Name = name or "Toggle"
    toggle.Text = text or "Toggle"
    toggle.Position = position or UDim2.new(0.5, 0, 0.5, 0)
    toggle.Size = size or UDim2.new(0.2, 0, 0.1, 0)
    toggle.BackgroundColor3 = bgColor or Color3.fromRGB(0, 0, 255)
    toggle.TextColor3 = textColor or Color3.fromRGB(255, 255, 255)
    toggle.Parent = parent
    
    local state = false
    
    toggle.MouseButton1Click:Connect(function()
        state = not state
        toggle.BackgroundColor3 = state and Color3.fromRGB(0, 255, 0) or bgColor
        if callback then callback(state) end
    end)
    
    return toggle
end

-- Function to create a Slider
function SoulUI:createSlider(parent, name, text, position, size, bgColor, min, max, callback)
    local slider = Instance.new("Frame")
    slider.Name = name or "Slider"
    slider.Position = position or UDim2.new(0.5, 0, 0.5, 0)
    slider.Size = size or UDim2.new(0.4, 0, 0.1, 0)
    slider.BackgroundColor3 = bgColor or Color3.fromRGB(255, 255, 255)
    slider.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Text = text or "Slider"
    label.Size = UDim2.new(1, 0, 0.5, 0)
    label.TextColor3 = Color3.fromRGB(0, 0, 0)
    label.BackgroundTransparency = 1
    label.Parent = slider
    
    local knob = Instance.new("Frame")
    knob.Name = "Knob"
    knob.Size = UDim2.new(0.1, 0, 1, 0)
    knob.Position = UDim2.new(0, 0, 0, 0)
    knob.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
    knob.Parent = slider
    
    local dragging = false
    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    knob.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    slider.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativePos = (input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X
            knob.Position = UDim2.new(math.clamp(relativePos, 0, 1), 0, 0, 0)
            if callback then callback(math.clamp(relativePos * (max - min) + min, min, max)) end
        end
    end)
    
    return slider
end

-- Function to create a Dropdown
function SoulUI:createDropdown(parent, name, text, position, size, bgColor, options, callback)
    local dropdown = Instance.new("Frame")
    dropdown.Name = name or "Dropdown"
    dropdown.Position = position or UDim2.new(0.5, 0, 0.5, 0)
    dropdown.Size = size or UDim2.new(0.3, 0, 0.2, 0)
    dropdown.BackgroundColor3 = bgColor or Color3.fromRGB(255, 255, 255)
    dropdown.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Text = text or "Dropdown"
    label.Size = UDim2.new(1, 0, 0.3, 0)
    label.TextColor3 = Color3.fromRGB(0, 0, 0)
    label.BackgroundTransparency = 1
    label.Parent = dropdown
    
    local selection = Instance.new("TextButton")
    selection.Name = "Selection"
    selection.Text = options[1] or "Select"
    selection.Size = UDim2.new(1, 0, 0.7, 0)
    selection.Position = UDim2.new(0, 0, 0.3, 0)
    selection.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    selection.Parent = dropdown
    
    local menu = Instance.new("Frame")
    menu.Name = "Menu"
    menu.Size = UDim2.new(1, 0, #options * 0.7, 0)
    menu.Position = UDim2.new(0, 0, 1, 0)
    menu.Visible = false
    menu.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    menu.Parent = dropdown
    
    selection.MouseButton1Click:Connect(function()
        menu.Visible = not menu.Visible
    end)
    
    for i, option in ipairs(options) do
        local button = Instance.new("TextButton")
        button.Name = "Option" .. i
        button.Text = option
        button.Size = UDim2.new(1, 0, 1 / #options, 0)
        button.Position = UDim2.new(0, 0, (i - 1) / #options, 0)
        button.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
        button.Parent = menu
        
        button.MouseButton1Click:Connect(function()
            selection.Text = option
            menu.Visible = false
            if callback then callback(option) end
        end)
    end
    
    return dropdown
end

return SoulUI
